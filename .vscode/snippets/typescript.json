{
  "Next.js Component": {
    "prefix": "ncomp",
    "body": [
      "import React from 'react';",
      "import { cn } from '@/lib/utils';",
      "",
      "interface ${1:ComponentName}Props {",
      "  className?: string;",
      "  ${2:children?: React.ReactNode;}",
      "}",
      "",
      "/**",
      " * ${3:Component description}",
      " * @param props - Component props",
      " * @returns JSX element",
      " */",
      "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({",
      "  className,",
      "  ${2:children}",
      "}) => {",
      "  return (",
      "    <div className={cn('${4:base-classes}', className)}>",
      "      ${2:children}",
      "    </div>",
      "  );",
      "};"
    ],
    "description": "Create a Next.js component with TypeScript"
  },
  "API Route": {
    "prefix": "napi",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server';",
      "",
      "/**",
      " * ${1:API description}",
      " * @param request - Next.js request object",
      " * @returns JSON response",
      " */",
      "export async function ${2:GET}(request: NextRequest) {",
      "  try {",
      "    ${3:// Implementation}",
      "    ",
      "    return NextResponse.json({ success: true, data: ${4:result} });",
      "  } catch (error) {",
      "    console.error('${1:API description} error:', error);",
      "    return NextResponse.json(",
      "      { success: false, error: 'Internal server error' },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}"
    ],
    "description": "Create a Next.js API route"
  },
  "Custom Hook": {
    "prefix": "nhook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "/**",
      " * ${1:Hook description}",
      " * @returns ${2:Return type description}",
      " */",
      "export const use${3:HookName} = (${4:params}) => {",
      "  const [${5:state}, set${5/(.*)/${1:/capitalize}/}] = useState(${6:initialValue});",
      "",
      "  useEffect(() => {",
      "    ${7:// Effect implementation}",
      "  }, [${8:dependencies}]);",
      "",
      "  return {",
      "    ${5:state},",
      "    set${5/(.*)/${1:/capitalize}/},",
      "    ${9:otherReturns}",
      "  };",
      "};"
    ],
    "description": "Create a custom React hook"
  },
  "Page Component": {
    "prefix": "npage",
    "body": [
      "import React from 'react';",
      "import { Metadata } from 'next';",
      "",
      "export const metadata: Metadata = {",
      "  title: '${1:Page Title} | Red Lotus International LLC',",
      "  description: '${2:Page description}',",
      "  keywords: ['${3:keyword1}', '${4:keyword2}', '${5:keyword3}'],",
      "};",
      "",
      "/**",
      " * ${6:Page description}",
      " * @returns JSX element",
      " */",
      "export default function ${7:PageName}() {",
      "  return (",
      "    <main className=\"min-h-screen\">",
      "      ${8:// Page content}",
      "    </main>",
      "  );",
      "}"
    ],
    "description": "Create a Next.js page component"
  },
  "Form Component": {
    "prefix": "nform",
    "body": [
      "import React from 'react';",
      "import { useForm } from 'react-hook-form';",
      "import { zodResolver } from '@hookform/resolvers/zod';",
      "import { z } from 'zod';",
      "",
      "const ${1:formName}Schema = z.object({",
      "  ${2:field}: z.string().min(1, '${3:Field is required}'),",
      "});",
      "",
      "type ${1:formName}FormData = z.infer<typeof ${1:formName}Schema>;",
      "",
      "interface ${4:FormName}Props {",
      "  onSubmit: (data: ${1:formName}FormData) => void;",
      "  className?: string;",
      "}",
      "",
      "/**",
      " * ${5:Form description}",
      " * @param props - Form props",
      " * @returns JSX element",
      " */",
      "export const ${4:FormName}: React.FC<${4:FormName}Props> = ({",
      "  onSubmit,",
      "  className,",
      "}) => {",
      "  const {",
      "    register,",
      "    handleSubmit,",
      "    formState: { errors, isSubmitting },",
      "  } = useForm<${1:formName}FormData>({",
      "    resolver: zodResolver(${1:formName}Schema),",
      "  });",
      "",
      "  return (",
      "    <form onSubmit={handleSubmit(onSubmit)} className={className}>",
      "      ${6:// Form fields}",
      "      <button",
      "        type=\"submit\"",
      "        disabled={isSubmitting}",
      "        className=\"btn-primary\"",
      "      >",
      "        {isSubmitting ? '${7:Submitting...}' : '${8:Submit}'}",
      "      </button>",
      "    </form>",
      "  );",
      "};"
    ],
    "description": "Create a form component with validation"
  }
}
